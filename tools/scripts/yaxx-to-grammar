#!/usr/bin/perl

#
# yaxx-to-grammar
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#                          Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use warnings;
use diagnostics;

use Text::Balanced;

# Slurp the whole input file
open my $fh, $ARGV[0] or die $!;
local $/;
my $input = <$fh>;
close $fh;

# Declarations and grammar sections are required, but programs section's not
my $declarations;
my $grammar;

if (!(($input =~ m/^(.*)\s%%\s(.*)\s%%\s.*$/s) ||
      ($input =~ m/^(.*)\s%%\s(.*)/s))) {
    die("Wrong input file format");
}
$declarations = $1;
$grammar      = $2;

# Handle declarations, extract the start symbol
$declarations =~ /\s*\%start\s+(.*)\s*\n/;

defined($1) or die("Missing start symbol in declarations");

my $start;
my $output;

$start  = $1;
$output = "";

$output = "Start symbol $start\n\n";

# Handle grammar, remove all semantic actions
while ($grammar =~ s/(.*)([\n])//) {
    my $line;
    my $newline;

    $line = $1;

    if (defined($2)) {
	$newline = $2;
    } else {
	$newline = "";
    }

    # Fix spaces
    $line =~ s/^([^:]+)\s*:\s+/$1:\ /;

    # Clean comment
    $line =~ s/\#.*$//;

    # Skip empty line
    if ($line =~ /^\s*$/) {
	next;
    }

    # Current line hasn't semantic-actions, clean it up
    if (($line !~ s/^(.*)\s(\{[\s.*]?)$/$2/) &&
	($line !~ s/^(\{[\s.*]?)$/$1/))       {

	if ($line =~ /^\s*;\s*$/) {
	    $output =~ s/\s+$/\ ;/;
	    $output = $output . $newline;
	    next;
	}

	if ($line =~ s/^\s*\|\s*(.*)$/\|\ $1/) {
	    $output =~ s/\s+$/\ /;
	    $output = $output . $line . $newline;
	    next;
	}

	$line   =~ s/\s*;\s*$/\ ;/;
	$output = $output . $line . $newline;

	next;
    }

    if (defined($1) && defined($2)) {
	$output = $output . $1 . " ";
    }
    $grammar = $line . $newline . $grammar;

    my $extracted;
    my $remainder;


    # Extract bracketed semantic action and trash it
    ($extracted, $remainder) =
	Text::Balanced::extract_bracketed($grammar, '{}');

    ($remainder ne $grammar) or die("Bug hit!");

    $remainder =~ s/^\s*/\ /;
    $grammar   = $remainder;
}

# Print output
print $output;

exit 0;
