%{
#
# Parse.pm
#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#                          Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

    use 5.8.0;

    use warnings;
    use strict;
    use diagnostics;

    use Sitetool::Autoconfig;
    use Sitetool::Base::Trace;
    use Sitetool::Base::Debug;
    use Sitetool::OS::Shell;
    use Sitetool::OS::File;
    use Sitetool::OS::Filename;

    BEGIN {
	use Exporter ();
	our ($VERSION, @ISA, @EXPORT);

	@ISA    = qw(Exporter);
	@EXPORT = qw(&parse);
    }

    my $parsed_string   = "";
    my $indentation     = "";
    my $container_start = 0;
    my $container_type  = "GROUP";
    my $output_handler  = "";
    my $file_name       = undef;
    my $line_number     = 0;
    my $o_curly         = '{';
    my $c_curly         = '}';


    %}

%start syntax

    %%

syntax: header body ;

header: AUTOGEN DEFINITIONS SYMBOL ';' ;

body: | main_groups
    ;

main_groups: main_group | main_group main_groups
    ;

main_group: SYMBOL '=' '{' {

    $_[1] =~ y/[a-z]/[A-Z]/;

    $parsed_string .= $indentation .
	"\'"         .
	$_[1]        .
	"\' => "     .
	$o_curly     .
	"\n";

    $indentation .= "\t";

} main_group_items '}' ';' {

    $indentation =~ s/.//;

    $parsed_string .= $c_curly . ",\n";

}
;

main_group_items: main_group_item | main_group_item main_group_items
    ;

main_group_item: sub_variable | sub_group | sub_indexed
    ;

sub_variable: SYMBOL '=' QUOTEDSTRING ';' {

    if ($container_start == 1) {
	$container_start = 0;
	$container_type  = 'GROUP';

	$parsed_string .= $o_curly . "\n";
    }

    $_[1] =~ y/[a-z]/[A-Z]/;
    $_[1] =~ s/^VAR\-//;

    $parsed_string .= $indentation .
	"\'"         .
	$_[1]        .
	"\' => \""   .
	$_[3]        .
	"\",\n";

}
;

sub_group: SYMBOL '=' '{' sub_group_id sub_group_items '}' ';' {

    $indentation =~ s/.//;

    $parsed_string .= $indentation . $c_curly . ",\n";

}
;

sub_group_id: 'id' '=' QUOTEDSTRING ';' {

    $parsed_string .= $indentation .
	"\'"         .
	$_[3]        .
	"\' => "     .
	$o_curly     .
	"\n";

    $indentation .= "\t";

};

sub_group_items: sub_group_item | sub_group_item sub_group_items
    ;

sub_group_item: sub_variable | sub_container
    ;

sub_container: SYMBOL '=' '{' {

    $_[1] =~ y/[a-z]/[A-Z]/;

    $parsed_string .= $indentation . "\'" . $_[1] . "\' => ";

    $container_start = 1;

    $indentation .= "\t";

} sub_container_items '}' ';' {

    $indentation =~ s/.//;

    if ($container_type eq 'GROUP') {
	$parsed_string .= $indentation . $c_curly . ",\n";
    } else {
	$parsed_string .= $indentation . "],\n";
    }

}
;

sub_container_items: sub_indexed_items | sub_group_items
    ;

sub_indexed_items: sub_indexed_item | sub_indexed_item sub_indexed_items
    ;

sub_indexed_item: SYMBOL '[' DECIMAL ']' '=' '{' {

    if ($container_start == 1) {
	$container_start = 0;
	$container_type  = 'INDEXED';

	$parsed_string .= "[\n";

    }
    $parsed_string .= $indentation . $o_curly . "\n";

    $indentation .= "\t";

} sub_group_items '}' ';' {

    $indentation =~ s/.//;

    $parsed_string .= $indentation . $c_curly . ",\n";

}
;

%%

sub lexer_callback
{
    my $parser = shift;

    assert(defined($parser));
    assert(defined($parser->YYData->{INPUT}));

    while (length($parser->YYData->{INPUT}) >= 0) {
	debug("Parsing " . $file_name . ":" . $line_number . " "  .
	      "(" . length($parser->YYData->{INPUT}) . " to go)");

	# Remove leading whitespaces
	$parser->YYData->{INPUT} =~ s/^[ \t]+//;

	if ($parser->YYData->{INPUT} =~ s/^\n//) {

	    debug("Eating newline");
	    $line_number++;

	} elsif ($parser->YYData->{INPUT} =~
		 s/^\/\/.*\n//) {

	    debug("Eating comment and newline");
	    $line_number++;

	} elsif ($parser->YYData->{INPUT} =~
		 s/^id[ \t]*//) {

	    debug("Got id");

	    return ("id", "id");

	} elsif ($parser->YYData->{INPUT} =~
		 s/^autogen[ \t]*//) {

	    debug("Got autogen keyword");

	    return ("AUTOGEN", undef);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^definitions[ \t]*//) {

	    debug("Got definitions keyword");

	    return ("DEFINITIONS", undef);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^\#[ \t]*line[ \t]+([0-9]+)[ \t]*//) {

	    debug("Got line \`" . $1 . "' directive");
	    $line_number = $1;

	} elsif ($parser->YYData->{INPUT} =~
		 s/^\#[ \t]*file[ \t]+\"(.*)"[ \t]*//) {

	    debug("Got file \`" . $1 . "' directive");
	    $file_name = $1;

	} elsif ($parser->YYData->{INPUT} =~
		 s/^([a-zA-Z_][a-zA-Z0-9_\-]*)[ \t]*//) {

	    debug("Got symbol \`" . $1 . "'");

	    return ("SYMBOL", $1);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^([0-9]+)[ \t]*//) {

	    debug("Got decimal");

	    return ("DECIMAL", $1);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^\"(.*)\"[ \t]*//) {

	    debug("Got quoted string \`" . $1 . "'");

	    return ("QUOTEDSTRING", $1);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^([\{\}\[\]\;\=])[ \t]*//) {

	    debug("Got punctuation \`" . $1 . "'");

	    return ($1, $1);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^(.)//) {

	    debug("Got character \`" . $1 . "'");

	    return ($1, $1);

	} elsif ($parser->YYData->{INPUT} =~
		 s/^$//) {

	    debug("Got END-OF-FILE");

	    return ('', undef);

	} else {
	    bug("Undefined lexer input `" .
		substr($parser->YYData->{INPUT}, 0, 1)     .
		"\'");
	}
    }

    bug("Unreachable code");
}

sub syntax_error
{
    my $message = shift;
    my $lineno  = shift;

    assert(defined($message));
    assert(defined($lineno));

    error("Syntax error at line " . $lineno . ": " . $message);
    exit 1;
}

sub error_callback
{
    my $parser = shift;

    assert(defined($parser));

    my $value = $parser->YYCurtok;
    assert(defined($value));

    error("Unexpected \`" . $value . "'");
}

sub parse ($$)
{
    my $input_filename = shift;
    my $string_ref     = shift;

    assert(defined($input_filename));
    assert(defined($string_ref));

    debug("Parsing file \`" . $input_filename . "'");

    if (!file_ispresent($input_filename)) {
	error("Input file \`" . $input_filename . "' is missing");
	return 0;
    }

    my $string = "";
    if (!file_tostring($input_filename, \$string)) {
	return 0;
    }

    # Setup useful variables used later on
    $file_name   = $input_filename;
    $line_number = 1;

    my $parser;
    $parser = Sitetool::Parse->new();
    assert(defined($parser));

    $parser->YYData->{INPUT} = $string;

    my $debug_level;
#    $debug_level = debug_get() ? 0x1F : 0x00);
    $debug_level = 0;

    my $result;
    $result = $parser->YYParse(yylex   => \&lexer_callback,
			       yyerror => \&error_callback,
			       yydebug => $debug_level);

    if ($parser->YYNberr() > 0) {
	error("Cannot parse input file \`" . $input_filename . "'");
	return 0;
    }

    debug("Parsing completed successfully");

    ${$string_ref} = $parsed_string;

    return 1;
}
