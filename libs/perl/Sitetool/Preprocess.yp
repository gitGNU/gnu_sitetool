%{
#
# Preprocess.pm
#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#                          Alessandro Massignan
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use 5.8.0;

use warnings;
use strict;
use diagnostics;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::OS::File;
use Sitetool::OS::Environment;

BEGIN {
    use Exporter ();
    our ($VERSION, @ISA, @EXPORT);

    @ISA    = qw(Exporter);
    @EXPORT = qw(&preprocess);
}

%}

%start syntax

%%

syntax: | syntax
      ;

%%

sub preprocessor_expander($)
{
    my $ref = shift;

    assert(defined($ref));

    if (${$ref} =~ m/^[ \t]*$/) {
        # Skip empty lines

        return 1;
    } elsif (${$ref} =~ m/^[ \t]*\#.*$/) {
        # Skip comments

        return 1;
    }

    debug("Expanding environment variables");

    my $tmp    = ${$ref};
    my $expand = 0;

    while ($tmp =~ s/\@(.*)\@//) {
        my $variable = $1;

        debug("Found variable `" . $variable . "\'");

        my $value = environment_get($variable);

        if (!defined($value)) {
            debug("Variable `" . $variable . "\' is not defined");
            next;
        }

        debug("Variable `" . $variable .
              "\' value `" . $value    .
              "\'");

        ${$ref}   =~ s/\@$variable\@/$value/;
        $expand   = 1;
    }

    if ($expand == 1) {
        debug("  Expanded line `" . ${$ref} . "\'");
    }

    return 1;
}

sub preprocess_helper ($$)
{
    my $file       = shift;
    my $string_ref = shift;

    assert(defined($file));
    assert(defined($string_ref));

    if (!file_ispresent($file)) {
        error("File \`" . $file . "' doesn't exists");
        return 0;
    }

    my $filehandle;
    debug("Opening filehandle for file \`" . $file . "'");
    if (!open($filehandle, "<", $file)) {
        error("Cannot open file \`" . $file . "' for reading");
        return 0;
    }

    my $line;
    $line = 0;

    my $string;
    $string = "";

    # Place marker
    $string = $string . "#file \"" . $file . "\"\n";
    $string = $string . "#line "   . $line . "\n";

    while (<$filehandle>) {
        $line++;

        my $tmp;
        $tmp = $_;
        chomp($tmp);

        debug("  Got line \`" . $tmp . "'");

        if (!preprocessor_expander(\$tmp)) {
            error("Failed to expand environment variables");
            exit 1;
        }

        if ($tmp =~ m/^[ \t]*include[ \t]*\"(.*)\"[ \t]*$/) {
            # Handle file inclusion

            assert(defined($1));

            my $include_file;
            $include_file = File::Spec->rel2abs($1);

            debug("Including file \`" . $1 . "'");

            # Place marker
            $string = $string . "#file \"" . $file . "\"\n";
            $string = $string . "#line "   . $line . "\n";

            $line++;

            if (!&preprocess_helper($include_file, \$string)) {
                error("Cannot include file \`" . $include_file . "'");
                return 0;
            }

            $line++;

            # Place marker
            $string = $string . "#file \"" . $file . "\"\n";
            $string = $string . "#line "   . $line . "\n";

        } else {
            # Get the line as it is
            $string = $string . $tmp . "\n";
        }
    }

    debug("Closing filehandle for file \`" . $file . "'");
    close($filehandle);

    ${$string_ref} = ${$string_ref} . $string;

    return 1;
}

sub preprocess ($$)
{
    my $input_filename = shift;
    my $string_ref     = shift;

    assert(defined($input_filename));
    assert(defined($string_ref));

    debug("Preprocessing file \`" . $input_filename . "' to string");

    ${$string_ref} = "";
    if (!preprocess_helper($input_filename, $string_ref)) {
        error("Cannot preprocess file \`" . $input_filename . "'");
        return 0;
    }
    assert(defined(${$string_ref}));

    debug("Preprocessing completed successfully");

    return 1;
}
