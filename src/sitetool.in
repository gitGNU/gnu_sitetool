#! @PERL@

#
# sitetool
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use strict;
use warnings;
use diagnostics;

use File::Path;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::Base::Options;
use Sitetool::Configuration;
use Sitetool::OS::File;
use Sitetool::OS::Filename;
use Sitetool::OS::String;
use Sitetool::OS::Shell;
use Sitetool::OS::Environment;

#
# Globals
#

our $PROGRAM_NAME = "sitetool";

# XXX FIXME: To be removed ASAP
my $work_dir           = File::Spec->catdir(File::Spec->curdir(),
					    "." . $PROGRAM_NAME,
					    "site.wrk");
# XXX FIXME: To be removed ASAP
my $output_dir         = File::Spec->catdir(File::Spec->curdir(),
					    "." . $PROGRAM_NAME,
					    "site.out");

#my $style_dir          = File::Spec->catfile($data_dir, "styles",  "default");

my $input_file         = File::Spec->catfile(File::Spec->curdir(), "site.as");
my $preprocessed_file  = File::Spec->catfile($work_dir, 	   "site.pp");
my $configuration_file = File::Spec->catfile($work_dir, 	   "site.cfg");

my %tools = (
    "initialize" => {
	HANDLER        => "sitetool-initialize",
	DESCRIPTION    => "initialize",
	FLAGS          =>
	    "-w %work_dir% " .
	    "-o %output_dir%",
	PRE_REQUISITE  => [ ],
 	POST_REQUISITE => [ ],
    },
    "preprocess" => {
	HANDLER        => "sitetool-preprocess",
	DESCRIPTION    => "preprocess",
	FLAGS          =>
	    "-i %input_file% "        .
	    "-o %preprocessed_file% " .
	    "-D work_dir %work_dir%",
	PRE_REQUISITE  => [ "initialize" ],
	POST_REQUISITE => [ ],
    },
    "parse" => {
	HANDLER        => "sitetool-parse",
	DESCRIPTION    => "parse",
	FLAGS          =>
	    "-i %preprocessed_file% " .
	    "-w %work_dir% "          .
	    "-o %configuration_file%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess" ],
	POST_REQUISITE => [ ],
    },
    "build" => {
	HANDLER        => "sitetool-build",
	DESCRIPTION    => "build site",
	FLAGS          =>
	    "-c %configuration_file% " .
	    "-w %work_dir% "           .
	    "-o %output_dir%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse" ],
	POST_REQUISITE => [ ],
    },
    "check" => {
	HANDLER        => "sitetool-check",
	DESCRIPTION    => "check links in a previously built site",
	FLAGS          =>
	    "-c %configuration_file% " .
	    "-o %output_dir%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse",
			    "build" ],
	POST_REQUISITE => [ ],
    },
    "validate" => {
	HANDLER        => "sitetool-validate",
	DESCRIPTION    => "validate previously built site",
	FLAGS          =>
	    "-c %configuration_file% " .
	    "-o %output_dir%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse",
			    "build" ],
	POST_REQUISITE => [ ],
    },
    "digest" => {
	HANDLER        => "sitetool-digest",
	DESCRIPTION    => "compute digest for each previously built page",
	FLAGS          =>
	    "-c %configuration_file% " .
	    "-o %output_dir%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse",
			    "build" ],
	POST_REQUISITE => [ ],
    },
    "install" => {
	HANDLER        => "sitetool-install",
	DESCRIPTION    => "install previously built site",
	FLAGS          =>
	    "-c %configuration_file%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse",
			    "build",
			    "validate",
			    "check" ],
	POST_REQUISITE => [ ],
    },
    "clean" => {
	HANDLER        => "sitetool-clean",
	DESCRIPTION    => "remove built files",
	FLAGS          =>
	    "-c %configuration_file% " .
	    "-o %output_dir% "         .
	    "-w %work_dir%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse" ],
	POST_REQUISITE => [ ],
    },
    "uninstall" => {
	HANDLER        => "sitetool-uninstall",
	DESCRIPTION    => "uninstall site from remote host",
	FLAGS          =>
	    "-c %configuration_file%",
	PRE_REQUISITE  => [ "initialize",
			    "preprocess",
			    "parse" ],
	POST_REQUISITE => [ ],
    },
    "auths" => {
	HANDLER        => "sitetool-auths",
	DESCRIPTION    => "manage authorizations",
	FLAGS          =>
	    "", #"-c %configuration_file%",
	PRE_REQUISITE  => [ ],
	POST_REQUISITE => [ ],
    },
#    "styles" => {
#	HANDLER        => "sitetool-styles",
#	DESCRIPTION    => "manage styles",
#	FLAGS          =>
#	    "", #"-c %configuration_file%",
#	    PRE_REQUISITE  => [ ],
#	    POST_REQUISITE => [ ],
#    },
    );

#
# Utilities
#

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTION]... [-- [MODE-ARG]...]\n";
    print "\n";

    print "Options:\n";
    print "  -M, --mode=MODE            Running mode is MODE\n";
    print "  -n, --dry-run              display commands without modifying any files\n";
    print "  -f, --force                consider all files obsolete\n";
    print "  -W, --warnings=CATEGORY    report the warnings falling in CATEGORY\n";
    print "  -d, --debug                enable debugging traces\n";
    print "  -v, --verbose              verbosely report processing\n";
    print "  -h, --help                 print this help, then exit\n";
    print "  -V, --version              print version number, then exit\n";
    print "\n";

    print "Warning categories include:\n";
    print "  \`all'                      all the warnings\n";
    print "  \`none'                     turn off all the warnings\n";
    print "\n";

    print "MODE must be one of the following:\n";
    for my $tool (keys(%tools)) {
	assert(defined($tools{$tool}{DESCRIPTION}));

	printf("        %-11s          %-s\n",
	       $tool,
	       $tools{$tool}{DESCRIPTION});
    }
    print "\n";

    print "MODE-ARGS vary depending on the MODE.  Try \`" . $PROGRAM_NAME. " --help MODE' for a\n";
    print "more detailed description of MODE.\n";
    print "\n";

    print "The environment variables SITETOOL_BINARY_PATH, SITETOOL_LIBRARY_PATH and\n";
    print "SITETOOL_DATA_PATH are honored.\n";
    print "\n";

    print "Report bugs to <$PACKAGE_BUGREPORT>\n";

    return 1;
}

sub run_tool ($$@)
{
    my $tool    = shift;
    my $dry_run = shift;
    my @args    = @_;

    assert(defined($tool));
    assert(defined($dry_run));

    verbose("Running \`" . $tool . "'");

    my $handler;

    $handler = $tools{$tool}{HANDLER};
    debug("Handler is `$handler'");
    assert(defined($handler));

    my $flags;

    $flags = $tools{$tool}{FLAGS} . " @args";
    debug("Flags are `$flags'");
    assert(defined($flags));

    my $command;

    $command = File::Spec->catfile($bin_dir, $handler) . " " . $flags;

    if ($dry_run) {
	print $command . "\n";
	return 1;
    }

    if (!shell_execute($command)) {
	return 0;
    }

    return 1;
}

sub help_mode ($)
{
    my $mode = shift;

    if (defined($mode)) {
	debug("Producing help for mode \`" . $mode . "'");
	my $found;

	# Yes, let us provide help for that mode
	debug("Mode should be \`" . $mode . "'");
	$found = 0;
	for my $tool (keys(%tools)) {
	    debug("Tool = \`" . $tool . "'");
	    if ($tool =~ $mode) {
		debug("Got tool \`" . $tool . "' for the requested mode");
		$found = 1;
		last;
	    }
	}
	
	if (!$found) {
	    error("Unknown MODE \`" . $mode . "'");
	    return 0;
	}
	
	if (!run_tool($mode, 0, "-h")) {
	    error("Cannot get help for MODE \`" . $mode . "'");
	    return 0;
	}
    } else {
	debug("Mode is not defined, producing generic help");
	# No, let us provide the generic help
	help();
    }
    
    return 1;
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $running_mode  = undef;
my $force_mode    = 0;
my $dry_run       = 0;
my $run           = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Sitetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "M", "mode",     sub { $running_mode = $_[0];        return 1; }, 1, 1 ],
    [ "n", "dry-run",  sub { $dry_run = 1;                 return 1; }, 0, 0 ],
    [ "f", "force",    sub { $force_mode = 1;              return 1; }, 0, 0 ],
    [ "W", "warnings", sub { warning_set($_[0]);           return 1; }, 1, 1 ],
    [ "d", "debug",    sub { debug_set(1);                 return 1; }, 0, 0 ],
    [ "v", "verbose",  sub { verbose_set(1);               return 1; }, 0, 0 ],
    [ "h", "help",     sub { help_mode($_[0]);   $run = 0; return 1; }, 0, 1 ],
    [ "V", "version",  sub { version();          $run = 0; return 1; }, 0, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

my @options_slack = @ARGV;
if (!$options->parse(\@options_slack)) {
    hint("Option parsing failed");
    exit 1;
}

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

#
# Fixups tools flags
#

for my $tool (keys(%tools)) {
    my $string;

    $string = $tools{$tool}->{FLAGS};
    assert(defined($string));

    $string = string_replace_many($string, {
	"%work_dir%"           => $work_dir,
	"%output_dir%"         => $output_dir,
	"%input_file%"         => $input_file,
	"%preprocessed_file%"  => $preprocessed_file,
	"%configuration_file%" => $configuration_file});

    assert(defined($string));
    $tools{$tool}->{FLAGS} = $string;
}

#
# Some checks
#

if (!defined($running_mode)) {
    hint("Missing running mode");
    exit 1;
}

debug("Mode should be \`" . $running_mode . "'");
my $found = 0;
for my $tool (keys(%tools)) {
    debug("Tool = \`" . $tool . "'");
    if ($running_mode =~ $tool) {
	debug("Got tool \`" . $tool . "' for the requested mode");
	$found = 1;
	last;
    }
}
if (!$found) {
    error("Unknown option \`" . $running_mode . "'");
    exit 1;
}

debug("Running mode is \`$running_mode'");

#
# Setup flags (used later on)
#

{
    debug("Handling flags");

    my $flags = "";

    if (verbose_get() != 0) {
	$flags = "-v $flags";
    }
    if (debug_get() != 0) {
	$flags = "-d $flags";
    }
    if ($force_mode != 0) {
	$flags = "$flags -f";
    }
    $flags = "-W " . warning_get() . " " . $flags;

    debug("Inherited flags are \`" . $flags . "'");

    debug("Changing per-tool flags:");
    for my $tool (keys(%tools)) {
	debug("Tool "                          .
	      "\`" . $tool . "' "              .
	      "flags are "                     .
	      "\`" . $tools{$tool}{FLAGS} . "'");

	assert(defined($tools{$tool}{FLAGS}));
	$tools{$tool}{FLAGS} = $flags . " " . $tools{$tool}{FLAGS};

	debug("Modified flags  for tool "      .
	      "\`" . $tool . "' "              .
	      "are "                           .
	      "\`" . $tools{$tool}{FLAGS} . "'");
    }
}

#
# Dump the environment, useful for debugging purposes
#

{
    sub callback ($$) {
	my $key   = shift;
	my $value = shift;

	if (!defined($key)) {
	    $key = "undef";
	}
	if (!defined($value)) {
	    $value = "undef";
	}
	debug("Environment `" . $key . "' = `" . $value . "'")
    }
    environment_foreach(\&callback)
}

#
# Start the real work
#

my @tools_chain;

# Pre-requisites first
for my $tool (@{$tools{$running_mode}{PRE_REQUISITE}}) {
    assert(defined($tool));
    push(@tools_chain, $tool);
}

# The requiested tool
push(@tools_chain, $running_mode);

# Post-requisites last
for my $tool (@{$tools{$running_mode}{POST_REQUISITE}}) {
    assert(defined($tool));
    push(@tools_chain, $tool);
}

debug("Tools chain is \`@tools_chain'");
assert($#tools_chain >= 0);

for my $tool (@tools_chain) {
    if (!run_tool($tool, $dry_run, @options_slack)) {
	exit 1;
    }
}

exit 0;
