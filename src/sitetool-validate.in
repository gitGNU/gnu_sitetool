#! @PERL@

#
# sitetool-validate
#
# Copyright (C) 2008, 2009 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
        $ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
                      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  On DJGPP SHELL may not be set to a shell
    # that can handle redirection and quote arguments correctly,
    # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
    # has detected.
    $ENV{'SHELL'} = '@SHELL@' if ($^O eq 'dos');
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use File::Path;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::Base::Options;
use Sitetool::OS::Shell;
use Sitetool::OS::Directory;
use Sitetool::OS::Filename;
use Sitetool::OS::File;
use Sitetool::Net::WWW::HREF;
use Sitetool::Net::WWW::HTTP;
use Sitetool::Net::WWW::HTTPS;
use Sitetool::Net::WWW::FTP;
use Sitetool::Net::WWW::MAILTO;
use Sitetool::Configuration;
use Sitetool::Data::Array;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-validate";

#
# Utilities
#

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -f, --force                 force operation, if possible\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help_environment ()
{
    print "The environment variables SITETOOL_BINARY_PATH, SITETOOL_LIBRARY_PATH,\n";
    print "SITETOOL_DATA_PATH and SITETOOL_RC_FILES are honored.\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";
    print "  -c, --configuration=FILE    configuration file is FILE\n";
    print "  -o, --output-dir=DIR        use DIR as output directory\n";

    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";

    help_environment();

    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

# XXX FIXME: To be removed ASAP
my $output_dir         = "";
my $configuration_file = "";
my $force_mode         = 0;
my $dry_run            = 0;
my $run                = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Sitetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "c", "configuration",
      sub { $configuration_file = $_[0];                     return 1; }, 1 ],
    [ "o", "output-dif",
      sub { $output_dir = $_[0];                             return 1; }, 1 ],

    [ "n", "dry-run",    sub { $dry_run = 1;                 return 1; }, 0 ],
    [ "f", "force",      sub { $force_mode = 1;              return 1; }, 0 ],
    [ "W", "warnings",   sub { warning_set($_[0]);           return 1; }, 1 ],
    [ "d", "debug",      sub { debug_inc();                  return 1; }, 0 ],
    [ "v", "verbose",    sub { verbose_inc();                return 1; }, 0 ],
    [ "h", "help",       sub { help();             $run = 0; return 0; }, 0 ],
    [ "V", "version",    sub { version();          $run = 0; return 0; }, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

if(!$options->parse(\@ARGV)) {
    hint($options->strerror());
    exit 1;
}

my @options_slack;

assert($options->{OPTIND} >= 0);
@options_slack = @ARGV[$options->{OPTIND} .. $#ARGV];

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

if ($configuration_file eq "") {
    hint("Missing configuration file");
    exit 1;
}
if ($output_dir eq "") {
    hint("Missing output directory");
    exit 1;
}

if ($dry_run) {
    exit 0;
}

#
# Start the real work
#

assert(defined($TIDY));
if ($TIDY eq "") {
    error("The tidy executable was not available in your system when "  .
          $PACKAGE_NAME . " has been configured");
    error("In order to use the requested functionality please install " .
          "tidy and re-install " . $PACKAGE_NAME);
    exit 1;
}

my %configuration;
if (!configuration_melt($configuration_file, \%configuration)) {
    error("Cannot melt configuration from file \`$configuration_file'");
    hint("Try forcing a complete configuration file re-parsing");
    exit 1;
}

#
# Get output directory
#
$output_dir = filename_rel2abs($output_dir);

#
# Validate each page
#
verbose("Validating pages");
for my $page_id (keys(%{$configuration{PAGES}})) {

    my $destination;
    $destination = $configuration{PAGES}{$page_id}{DESTINATION};
    if (!defined($destination)) {
        error("Page \`" . $page_id. "' has no destination");
        exit 1;
    }

    my $file;
    $file = File::Spec->catfile($output_dir, $destination);
    if (!file_ispresent($file)) {
        error("Page \`" . $page_id . "' file \`" . $file . "' is missing");
        exit 1;
    }

    verbose("Validating page \`" . $page_id . "'");

    my $string;
    $string = "$TIDY "                                                        .
        "--show-warnings " . ((warning_get() ne "none") ? "yes" : "no") . " " .
        "-q "                                                                 .
        "--keep-time yes "                                                    .
        "-m "                                                                 .
        "$file";

    my $retval;
    $retval = shell_execute_and_report($string);
    if ($retval == 0) {
        # Input file processed successfully
    } elsif ($retval == 1) {
        # There were warnings
        warning("Warnings found on page \`" . $page_id . "'");
    } else {
        # There were errors

        error("Problems on page \`" . $page_id . "' structure");
        exit 1;
    }
}

exit 0;
