#! @PERL@

#
# sitetool-build
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  On DJGPP SHELL may not be set to a shell
    # that can handle redirection and quote arguments correctly,
    # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
    # has detected.
    $ENV{'SHELL'} = '@SHELL@' if ($^O eq 'dos');
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use File::Path;
use File::Basename;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::Base::Options;
use Sitetool::OS::File;
use Sitetool::OS::Filename;
use Sitetool::OS::Directory;
use Sitetool::OS::Shell;
use Sitetool::Variable;
use Sitetool::Configuration;
use Sitetool::SXML;
use Sitetool::XML;
use Sitetool::Scheme;
use Sitetool::Sitemap;
use Sitetool::Pagemap;
use Sitetool::Graphviz;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-build";

#
# Utilities
#

sub help_brief ()
{
    print "  -w, --work-dir=DIR          use DIR as a working directory\n";
    print "  -o, --output-dir=DIR        place output into directory DIR\n";
}

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -f, --force                 force operation, if possible\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -B, --brief-help            print a brief help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help_environment ()
{
    print "The environment variables SITETOOL_BINARY_PATH, SITETOOL_LIBRARY_PATH,\n";
    print "SITETOOL_DATA_PATH and SITETOOL_RC_FILES are honored.\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";
    print "  -c, --configuration=FILE    configuration file is FILE\n";

    help_brief();
    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";

    help_environment();

    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $work_dir           = "";
my $output_dir         = "";
my $maps_dir           = "";
my $contents_dir       = "";
my $pages_dir          = "";
my $configuration_file = "";
my $map_file           = "site.map";
my $dot_file           = "site.dot";
my $force_mode         = 0;
my $dry_run            = 0;
my $run                = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Sitetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "c", "configuration",
      sub { $configuration_file = $_[0];                     return 1; }, 1 ],
    [ "o", "output-dir",
      sub { $output_dir = $_[0];                             return 1; }, 1 ],
    [ "w", "work-dir",
      sub { $work_dir = $_[0];                               return 1; }, 1 ],

    [ "n", "dry-run",    sub { $dry_run = 1;                 return 1; }, 0 ],
    [ "f", "force",      sub { $force_mode = 1;              return 1; }, 0 ],
    [ "W", "warnings",   sub { warning_set($_[0]);           return 1; }, 1 ],
    [ "d", "debug",      sub { debug_inc();                  return 1; }, 0 ],
    [ "v", "verbose",    sub { verbose_inc();                return 1; }, 0 ],
    [ "h", "help",       sub { help();             $run = 0; return 0; }, 0 ],
    [ "B", "help-brief", sub { help_brief();       $run = 0; return 0; }, 0 ],
    [ "V", "version",    sub { version();          $run = 0; return 0; }, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

if(!$options->parse(\@ARGV)) {
    hint($options->strerror());
    exit 1;
}

my @options_slack;

assert($options->{OPTIND} >= 0);
@options_slack = @ARGV[$options->{OPTIND} .. $#ARGV];

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

if ($configuration_file eq "") {
    hint("Missing configuration file");
    exit 1;
}
if (-z $output_dir) {
    hint("Missing output directory");
    exit 1;
}
if (-z $work_dir) {
    hint("Missing working directory");
    exit 1;
}

#
#
#

if ($dry_run) {
    exit 0;
}

#
# Setup variables used later
#

$maps_dir     = File::Spec->catdir($work_dir, "maps");
$contents_dir = File::Spec->catdir($work_dir, "contents");
$pages_dir    = File::Spec->catdir($work_dir, "pages");

#
# Setup flags (used later on)
#
my $flags = "";

if (verbose_get() != 0) {
    $flags = "$flags -v";
}
if (debug_get() != 0) {
    $flags = "$flags -d";
}
$flags = "$flags -W " . warning_get();
debug("Inherited flags are \`" . $flags . "'");

#
# Checks for needed directories
#
assert(directory_ispresent($work_dir));
assert(directory_ispresent($maps_dir));
assert(directory_ispresent($contents_dir));
assert(directory_ispresent($pages_dir));
assert(directory_ispresent($output_dir));

#
# Start the real work
#

my %configuration;
if (!configuration_melt($configuration_file, \%configuration)) {
    error("Cannot melt configuration from file \`$configuration_file'");
    hint("Try forcing a complete configuration file re-parsing");
    exit 1;
}

my $source;
my $destination;
my @command;

#
# Create placeholders (directories)
#
verbose("Creating placeholders");
for my $page_id (keys(%{$configuration{PAGES}})) {
    my $file;
    my $directory;
    my $destination;

    $destination = $configuration{PAGES}{$page_id}{DESTINATION};
    if (!defined($destination)) {
	error("Page \`" . $page_id. "' has no destination");
	exit 1;
    }

    $file      = File::Spec->catfile($output_dir, $destination);
    $directory = dirname($file);

    if (!directory_create($directory)) {
	directory_remove($directory);
	exit 1;
    }
}

#
# Create sitemap
#
verbose("Creating sitemap");

#debug("Preparing sitemap inputs");
#for my $page_id (keys(%{$configuration{PAGES}})) {
#    my $file;
##    my $directory;
#    my $destination;
#
#    $destination = $configuration{PAGES}{$page_id}{DESTINATION};
#    if (!defined($destination)) {
#	error("Page \`" . $page_id. "' has no destination");
#	exit 1;
#    }
#
#    $file      = File::Spec->catfile($output_dir, $destination);
##    $directory = dirname($file);
#
#    if (!string_tofile($page_id, $file)) {
#	file_remove($file);
#	exit 1;
#    }
#}

debug("Building sitemap");
# Place sitemap in a different directory than pagemaps so they will not collide
my $sitemap_file = File::Spec->catfile($work_dir, $map_file);
assert(defined($sitemap_file));
if (!sitemap_create(\%configuration,
		    $sitemap_file)) {
    file_remove($sitemap_file);
    exit 1;
}

my $graphviz_file = File::Spec->catfile($work_dir, $dot_file);
assert(defined($graphviz_file));
if (!sitemap2graphviz($sitemap_file, $graphviz_file)) {
    file_remove($graphviz_file);
    exit 1;
}

#debug("Removing sitemap inputs");
#for my $page_id (keys(%{$configuration{PAGES}})) {
#    my $file;
##    my $directory;
#    my $destination;
#
#    $destination = $configuration{PAGES}{$page_id}{DESTINATION};
#    $file        = File::Spec->catfile($output_dir, $destination);
##    $directory   = dirname($file);
#
#    if (!file_remove($file)) {
#	exit 1;
#    }
#}

assert(file_ispresent($sitemap_file));

verbose("Creating pagemaps");
for my $page_id (keys(%{$configuration{PAGES}})) {
    my $destination;

    my $page;
    $page = variable_canonicalize($page_id);
    assert(defined($page));

    $destination = File::Spec->catfile($maps_dir, $page . ".map");

#    if ($destination eq $sitemap_file) {
#	error("Pagemap for page "          .
#	      "\`" . $page_id . "' "       .
#	      "cannot overwrite sitemap file");
#	exit 1;
#    }

    if (!pagemap_create($sitemap_file, $page_id, $destination)) {
	file_remove($destination);
	exit 1;
    }
}

#
# Files processing phase
#
debug("Processing files");
for my $file_id (keys(%{$configuration{FILES}})) {

    verbose("Processing file \`" . $file_id . "'");

    my $file;
    $file = variable_canonicalize($file_id);
    assert(defined($file));

    my $input           = $configuration{FILES}{$file_id}{SOURCE};
    my $output          = $configuration{FILES}{$file_id}{DESTINATION};
    my $output_dirname  = dirname($output);
    my $output_basename = basename($output);
    my $output_basedir  = File::Spec->catfile($output_dir, $output_dirname);

    if (!directory_create($output_basedir)) {
	exit 1;
    }

    if (!file_copy(File::Spec->catfile($input),
		   File::Spec->catfile($output_basedir, $output_basename))) {
	exit 1;
    }
}

#
# Contents processing phase
#
debug("Processing contents");

#for my $content_id (keys(%{$configuration{CONTENTS}})) {
#
#    verbose("Processing content \`" . $content_id . "'");
#
#    my $content;
#    $content = variable_canonicalize($content_id);
#    assert(defined($content));
#
#    $source = $configuration{CONTENTS}{$content_id}{SOURCE};
#    if (!file_ispresent($source)) {
#	error("Missing input file \`" . $source . "'");
#	exit 1;
#    }
#    $destination = File::Spec->catfile($contents_dir,
#				       $content . ".sxml");
#
#    if ($force_mode || file_isnewer($source, $destination)) {
#	debug("Output file is obsolete or " .
#	      "the user is requesting a forced update");
#
#	my $temp_dir;
#
#	$temp_dir = File::Spec->catfile($contents_dir, $content);
#	assert(defined($temp_dir));
#	if (!directory_create($temp_dir)) {
#	    exit 1;
#	}
#	if (!filterchain_apply($source,
#			       $destination,
#			       File::Spec->catfile($contents_dir, $content),
#			       \$configuration{CONTENTS}{$content_id}{FILTERS})) {
#	    exit 1;
#	}
#	if (!directory_remove($temp_dir)) {
#	    exit 1;
#	}
#    } else {
#	debug("Destination file is not obsolete, skipping filtering");
#    }
#
#    # Fill-in in order to use later in page processing phase
#    $configuration{CONTENTS}{$content_id}{DESTINATION} = $destination;
#}

# Build all transformations
verbose("Building transformations");

my $temp_dir;
my $transformations;

$transformations = "";
$temp_dir        = $contents_dir;
for my $content_id (keys(%{$configuration{CONTENTS}})) {

    verbose("Building transformation for content \`" . $content_id . "'");

    my $content;
    $content = variable_canonicalize($content_id);
    assert(defined($content));

    $source = $configuration{CONTENTS}{$content_id}{SOURCE};
    if (!file_ispresent($source)) {
	error("Missing input file \`" . $source . "'");
	exit 1;
    }
    $destination = File::Spec->catfile($contents_dir, $content . ".sxml");

    # Got a transformation
    $transformations = "$transformations ${source}:${destination}";

    # Fill-in in order to use later in page processing phase
    $configuration{CONTENTS}{$content_id}{DESTINATION} = $destination;
}

# Apply all transformations
assert(defined($FCP));
if ($FCP eq "") {
    error("The fcp executable was not available in your system when "   .
	  $PACKAGE_NAME . " has been configured");
    error("In order to use the requested functionality please install " .
	  "fcp and re-install " . $PACKAGE_NAME);
    exit 1;
}
my $command;
my $fcp_flags;

$fcp_flags = "";
$fcp_flags = $fcp_flags . ((verbose_get() != 0) ? "-v " : "");
$fcp_flags = $fcp_flags . ((debug_get()   != 0) ? "-d " : "");
$command =
    "$FCP $fcp_flags "    .
    "-t $temp_dir "       .
    "-s : "               .
    "-m 100 "             .
    "-q "                 .
    "-r ${data_dir}/fcp " .
    "${transformations}";
verbose("Executing transformations");
if (!shell_execute($command)) {
    exit 1;
}
verbose("Transformations completed");

#
# Pages processing phase
#
debug("Processing pages");

for my $page_id (keys(%{$configuration{PAGES}})) {

    verbose("Processing page \`" . $page_id . "'");

    my $page;
    $page = variable_canonicalize($page_id);
    assert(defined($page));

    my $output          = $configuration{PAGES}{$page_id}{DESTINATION};
    my $output_dirname  = dirname($output);
    my $output_basename = basename($output);

    #
    # Page variables
    #
    debug("Building page variables");
    $source      = undef;
    $destination = File::Spec->catfile($pages_dir, $page . "-vars.scm");

    my $file_handle;
    if (!open($file_handle, ">", $destination)) {
	error("Cannot open file \`" . $destination . "' for writing");
	exit 1;
    }

    # Output all user defined variables (page local)
    for my $var (keys(%{$configuration{PAGES}{$page_id}{VARS}})) {
	my $name  = $var;
	my $value = $configuration{PAGES}{$page_id}{VARS}{$var};

	print $file_handle
	    "(define as_page_variable_$name \"$value\")\n";
    }

    # Output all user defined variables (site global). Note the scope !!!
    for my $var (keys(%{$configuration{VARS}})) {
	if (defined($configuration{PAGES}{$page_id}{VARS}{$var})) {
	    debug("Skipping global variable, page redefined value !");
	    next;
	}
	my $name  = $var;
	my $value = $configuration{VARS}{$var};

	print $file_handle
	    "(define as_page_variable_$name \"$value\")\n";
    }

    # Output all system defined variables
    print $file_handle
	"(define as_site_variable_PROGRAMNAME    \"$PACKAGE_NAME\")\n";
    print $file_handle
	"(define as_site_variable_PROGRAMVERSION \"$PACKAGE_VERSION\")\n";

    close($file_handle);

    #
    # Page contents
    #
    debug("Building page contents");
    for my $key (keys(%{$configuration{PAGES}{$page_id}{CONTENTS}})) {

	my $content_id = $configuration{PAGES}{$page_id}{CONTENTS}{$key};
	my $content    = variable_canonicalize($content_id);
	assert(defined($content));

	debug("Content is "             .
	      "\`" . $content_id . "' " .
	      "(canonicalized as "      .
	      "\`" . $content . "')");

	$source = $configuration{CONTENTS}{$content_id}{DESTINATION};
	if (!defined($source)) {
	    error("Page \`" . $page_id . "' referts to an undefined " .
		  "content \`" . $content_id . "'");
	    exit 1;
	}

	$destination = File::Spec->catfile($pages_dir,
					   $page . "-content-$content.scm");
	if (!sxml2scheme($source, "as_page_content_$key", $destination)) {
	    file_remove($destination);
	    exit 1;
	}
    }

    #
    # Page layout
    #
    debug("Building page layout");
    $source      = $configuration{COMMON}{LAYOUT};
    if (!defined($source)) {
	error("Missing layout file for page \`" . $page_id . "', " .
	      "using \`" . $source . "'");
	exit 1;
    }
    $source      = filename_rel2abs($source);
    $destination = File::Spec->catfile($pages_dir, $page . "-layout.scm");
    if (!sxml2scheme($source, "as_page_layout", $destination)) {
	file_remove($destination);
	exit 1;
    }

    #
    # Create SCM file from all SCM files
    #
    debug("Building scheme file");
    $destination = File::Spec->catfile($pages_dir, $page . "-all.scm");
    if (!file_remove($destination)) {
	exit 1;
    }
    if (!file_touch($destination)) {
	exit 1;
    }

    if (!file_cat(File::Spec->catfile($pages_dir, $page . "-vars.scm"),
		  $destination)) {
	file_remove($destination);
	exit 1;
    }
    for my $key (keys(%{$configuration{PAGES}{$page_id}{CONTENTS}})) {

	my $content_id = $configuration{PAGES}{$page_id}{CONTENTS}{$key};
	my $content    = variable_canonicalize($content_id);
	assert(defined($content));

	if (!file_cat(File::Spec->catfile($pages_dir,
					  $page . "-content-$content.scm"),
		      $destination)) {
	    file_remove($destination);
	    exit 1;
	}
    }
    if (!file_cat(File::Spec->catfile($pages_dir, $page . "-layout.scm"),
		  $destination)) {
	file_remove($destination);
	exit 1;
    }

    debug("Building XML file");
    $source      = $destination;
    $destination = File::Spec->catfile($pages_dir, $page . "-all.xml");

    if (!scheme2xml($source, "as_page_layout", $destination)) {
	file_remove($destination);
	exit 1;
    }

    #
    # Output final file
    #
    debug("Building HTML file");
    my $destination_dir = File::Spec->catfile($output_dir,
					      $output_dirname);
    if (!directory_create($destination_dir)) {
	exit 1;
    }

    $source      = $destination;
    $destination = File::Spec->catfile($destination_dir,
				       $output_basename);
    if (!xml2xhtml($source, $destination)) {
	file_remove($destination);
	exit 1;
    }
}

debug("All pages processed successfully");

exit 0;
