#! @PERL@

#
# sitetool-initialize
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  On DJGPP SHELL may not be set to a shell
    # that can handle redirection and quote arguments correctly,
    # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
    # has detected.
    $ENV{'SHELL'} = '@SHELL@' if ($^O eq 'dos');
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::Base::Options;
use Sitetool::OS::Directory;
use Sitetool::OS::Filename;
use Sitetool::OS::File;
use Sitetool::OS::String;
use Sitetool::Configuration;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-initialize";

#
# Utilities
#

sub help_brief ()
{
    print "  -w, --work-dir=DIR          working directory is DIR\n";
    print "  -o, --output-dir=DIR        output directory is DIR\n";
    print "  -f, --force                 consider all files obsolete\n";
}

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -B, --brief-help            print a brief help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";

    help_brief();
    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $work_dir           = "";
my $output_dir         = "";
my $force_mode         = 0;
my $dry_run            = 0;
my $run                = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Sitetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "w", "work-dir",
      sub { $work_dir = $_[0];                               return 1; }, 1 ],
    [ "o", "output-dir",
      sub { $output_dir = $_[0];                             return 1; }, 1 ],
    [ "n", "dry-run",    sub { $dry_run = 1;                 return 1; }, 0 ],
    [ "f", "force",      sub { $force_mode = 1;              return 1; }, 0 ],
    [ "W", "warnings",   sub { warning_set($_[0]);           return 1; }, 1 ],
    [ "d", "debug",      sub { debug_set(1);                 return 1; }, 0 ],
    [ "v", "verbose",    sub { verbose_set(1);               return 1; }, 0 ],
    [ "h", "help",       sub { help();             $run = 0; return 0; }, 0 ],
    [ "B", "help-brief", sub { help_brief();       $run = 0; return 0; }, 0 ],
    [ "V", "version",    sub { version();          $run = 0; return 0; }, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

if(!$options->parse(\@ARGV)) {
    hint($options->strerror());
    exit 1;
}

my @options_slack;

assert($options->{OPTIND} >= 0);
@options_slack = @ARGV[$options->{OPTIND} .. $#ARGV];

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

if ($work_dir eq "") {
    hint("Missing work directory");
    exit 1;
}
if ($output_dir eq "") {
    hint("Missing output directory");
    exit 1;
}

if ($dry_run) {
    exit 0;
}

#
# Create work and output directories
#
$work_dir   = filename_rel2abs($work_dir);
$output_dir = filename_rel2abs($output_dir);

debug("Working directory is \`" . $work_dir . "'");
debug("Output directory is  \`" . $output_dir . "'");

#
# Remove old directories
#
debug("Removing old directories, if present");
if (directory_ispresent($work_dir)) {
    if (!directory_remove($work_dir)) {
	exit 1;
    }
}
if (directory_ispresent($output_dir)) {
    if (!directory_remove($output_dir)) {
	exit 1;
    }
}

#
# Build newer ones
#
verbose("Building working directories");
if (!directory_create($work_dir)) {
    exit 1;
}
verbose("Building output directory");
if (!directory_create($output_dir)) {
    directory_remove($work_dir);
    exit 1;
}

#
# Populate work directories
#
my $maps_dir      = File::Spec->catdir($work_dir,  "maps");
my $contents_dir  = File::Spec->catdir($work_dir,  "contents");
my $pages_dir     = File::Spec->catdir($work_dir,  "pages");

if (!directory_create($maps_dir)     ||
    !directory_create($contents_dir) ||
    !directory_create($pages_dir)) {
    directory_remove($work_dir);
    exit 1;
}

#
# Check the setup
#
if (!directory_ispresent($work_dir)) {
    error("Cannot setup \`" . $work_dir . "' directory");
    exit 1;
}
if (!directory_ispresent($maps_dir)) {
    error("Cannot setup \`" . $maps_dir . "' directory");
    exit 1;
}
if (!directory_ispresent($contents_dir)) {
    error("Cannot setup \`" . $contents_dir . "' directory");
    exit 1;
}
if (!directory_ispresent($pages_dir)) {
    error("Cannot setup \`" . $pages_dir . "' directory");
    exit 1;
}
if (!directory_ispresent($output_dir)) {
    error("Cannot setup \`" . $output_dir . "' directory");
    exit 1;
}

exit 0;
