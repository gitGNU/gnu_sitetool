#! @PERL@

#
# sitetool-styles
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::OS::Shell;
use Sitetool::OS::File;
use Sitetool::Configuration;
use Sitetool::RCDirectory;
use Sitetool::RCFile;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-styles";

#
# Utilities
#

sub help_brief ()
{
    print "  -i, --initialize            initialize the authorizations DB\n";
    print "  -A, --add=HOST LOGIN PSWD   add a DB entry\n";
    print "  -D, --delete=HOST LOGIN     remove a DB entry\n";
    print "  -S, --show                  show all DB entries\n";
    print "  -C, --clear                 clear all DB entries\n";
    print "  -f, --force                 force operations, whenever possible\n";
}

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -B, --brief-help            print a brief help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";

    help_brief();
    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $configuration_file = "";
my $force_mode         = 0;
my $running_mode       = undef;
my $host               = undef;
my $login              = undef;
my $password           = undef;

debug_set(0);
verbose_set(0);
warning_set("none");

# Parse options
my $i = 0;
while ($i <= $#ARGV) {
#    if (($ARGV[$i] =~ /^\-c$/)      || ($ARGV[$i] =~ /^\-\-configuration$/)) {
#	$i++;
#	$configuration_file = $ARGV[$i];
#    } elsif (($ARGV[$i] =~ /^\-f$/) || ($ARGV[$i] =~ /^\-\-force$/)) {
    if (($ARGV[$i] =~ /^\-i$/) || ($ARGV[$i] =~ /^\-\-initialize$/)) {
	$running_mode = "initialize";
    } elsif (($ARGV[$i] =~ /^\-A$/) || ($ARGV[$i] =~ /^\-\-add$/)) {
	$running_mode = "add";

	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing host");
	    exit 1;
	}
	$host = $ARGV[$i];

	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing login");
	    exit 1;
	}
	$login = $ARGV[$i];

	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing password");
	    exit 1;
	}
	$password = $ARGV[$i];

    } elsif (($ARGV[$i] =~ /^\-D$/) || ($ARGV[$i] =~ /^\-\-delete$/)) {
	$running_mode = "delete";

	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing host");
	    exit 1;
	}
	$host = $ARGV[$i];

	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing login");
	    exit 1;
	}
	$login = $ARGV[$i];

    } elsif (($ARGV[$i] =~ /^\-S$/) || ($ARGV[$i] =~ /^\-\-show$/)) {
	$running_mode = "show";
    } elsif (($ARGV[$i] =~ /^\-C$/) || ($ARGV[$i] =~ /^\-\-clear$/)) {
	$running_mode = "clear";
    } elsif (($ARGV[$i] =~ /^\-f$/) || ($ARGV[$i] =~ /^\-\-force$/)) {
	$force_mode = 1;
    } elsif (($ARGV[$i] =~ /^\-B$/) || ($ARGV[$i] =~ /^\-\-brief\-help$/)) {
	help_brief();
	exit 0;
    } elsif (($ARGV[$i] =~ /^\-h$/) || ($ARGV[$i] =~ /^\-\-help$/)) {
	help();
	exit 0;
    } elsif (($ARGV[$i] =~ /^\-W$/) || ($ARGV[$i] =~ /^\-\-warnings$/)) {
	$i++;
	if (!defined($ARGV[$i])) {
	    hint("Missing warning level");
	    exit 1;
	}
	warning_set($ARGV[$i]);
    } elsif (($ARGV[$i] =~ /^\-d$/) || ($ARGV[$i] =~ /^\-\-debug$/)) {
	debug_set(1);
    } elsif (($ARGV[$i] =~ /^\-v$/) || ($ARGV[$i] =~ /^\-\-verbose$/)) {
	verbose_set(1);
    } elsif (($ARGV[$i] =~ /^\-V$/) || ($ARGV[$i] =~ /^\-\-version$/)) {
	version();
	exit 0;
    } else {
	error("Unknown option \`" . $ARGV[$i] . "'");
	exit 1;
    }

    $i++;
}

#
# Parameters check
#

if (!defined($running_mode)) {
    hint("Missing running mode");
    exit 1;
}

#
# Start the real work
#

my $rc_directory;
$rc_directory = Sitetool::RCDirectory->new();
assert(defined($rc_directory));

my $rc_filename;
$rc_filename = File::Spec->catfile($rc_directory->dirname(), "styles");
assert(defined($rc_filename));

my $rc;
$rc = Sitetool::RCFile->new($rc_filename);
assert(defined($rc));

if ($running_mode =~ /^initialize$/) {
    debug("Initializing DB");
    if (!$rc->save()) {
	exit 1;
    }
} elsif ($running_mode =~ /^add$/) {
    debug("Adding entry to DB");
    if (!$rc->load()) {
	exit 1;
    }
    if (!$rc->add($host, $login, $password)) {
	exit 1;
    }
    if (!$rc->save()) {
	exit 1;
    }
} elsif ($running_mode =~ /^remove$/) {
    debug("Removing entry from DB");
    if (!$rc->load()) {
	exit 1;
    }
    if (!$rc->remove($host, $login)) {
	exit 1;
    }
    if (!$rc->save()) {
	exit 1;
    }
} elsif ($running_mode =~ /^clear$/) {
    debug("Clearing DB entries");
    if (!file_remove($rc_filename)) {
	exit 1;
    }
} elsif ($running_mode =~ /^show$/) {
    debug("Showing DB entries");
    if (!$rc->load()) {
	exit 1;
    }
    if (!$rc->foreach(undef, undef, undef)) {
    }
} else {
    hint("Unknown running mode");
    exit 1;
}

exit 0;
