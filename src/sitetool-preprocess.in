#! @PERL@

#
# sitetool-preprocess
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::Base::Options;
use Sitetool::OS::Directory;
use Sitetool::OS::Filename;
use Sitetool::OS::File;
use Sitetool::OS::String;
use Sitetool::OS::Environment;
use Sitetool::Configuration;
use Sitetool::Preprocess;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-preprocess";

#
# Utilities
#

sub help_brief ()
{
    print "  -D, --define=VAR=VALUE      define variable VAR to value VALUE\n";
    print "  -U, --undefine=VAR          undefine variable VAR\n";
    print "  -i, --input=FILE            use FILE as input file\n";
    print "  -o, --output=FILE           use FILE as output file\n";
    print "  -f, --force                 consider all files obsolete\n";
}

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -B, --brief-help            print a brief help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";

    help_brief();
    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $input_file  = "";
my $output_file = "";
my $force_mode  = 0;
my $dry_run     = 0;
my $run         = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Sitetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "i", "input",
      sub { $input_file = $_[0];                             return 1; }, 1,1 ],
    [ "o", "output",
      sub { $output_file = $_[0];                            return 1; }, 1,1 ],
    [ "D", "define",
      sub {
	  my $variable;
	  $variable = $_[0];
	  if (!defined($variable)) {
	      hint("Missing environment variable name");
	      return 0;
	  }

	  my $value;
	  $value = $_[1];
	  if (!defined($value)) {
	      hint("Missing environment variable value");
	      return 0;
	  }

	  if (!environment_set($variable, $value)) {
	      error("Cannot set environment variable \`" . $variable . "'");
	      exit 1;
	  }
	  return 1;
      },
      2,2 ],
    [ "U", "undefine",
      sub {
	  my $variable;
	  $variable = $_[0];
	  if (!defined($variable)) {
	      hint("Missing environment variable name");
	      return 0;
	  }

	  if (!environment_remove($variable)) {
	      error("Cannot remove environment variable \`" . $variable . "'");
	      return 0;
	  }

	  return 1;
      },
      1,1 ],
    [ "n", "dry-run",    sub { $dry_run = 1;                 return 1; }, 0,0 ],
    [ "f", "force",      sub { $force_mode = 1;              return 1; }, 0,0 ],
    [ "W", "warnings",   sub { warning_set($_[0]);           return 1; }, 1,1 ],
    [ "d", "debug",      sub { debug_set(1);                 return 1; }, 0,0 ],
    [ "v", "verbose",    sub { verbose_set(1);               return 1; }, 0,0 ],
    [ "h", "help",       sub { help();             $run = 0; return 1; }, 0,0 ],
    [ "B", "help-brief", sub { help_brief();       $run = 0; return 1; }, 0,0 ],
    [ "V", "version",    sub { version();          $run = 0; return 1; }, 0,0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

my @options_slack = @ARGV;
if(!$options->parse(\@options_slack)) {
    hint("Option parsing failed");
    exit 1;
}

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

if ($input_file eq "") {
    hint("Missing input file");
    exit 1;
}
if (!file_ispresent($input_file)) {
    error("Input file is missing");
    exit 1;
}
if ($output_file eq "") {
    hint("Missing output file");
    exit 1;
}

if ($dry_run) {
    exit 0;
}

#
# Start the real work
#
if ($force_mode || file_isnewer($input_file, $output_file)) {
    my $string;

    $string = "";
    if (!Sitetool::Preprocess::preprocess($input_file, \$string)) {
	exit 1;
    }

    debug("Dumping string to file \`" . $output_file . "'");
    if (!string_tofile($string, $output_file)) {
	file_remove($output_file);
	exit 1;
    }
}

exit 0;
