#! @PERL@

#
# sitetool-check
#
# (C) 2007, 2008 Francesco Salvestrini <salvestrini@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'SITETOOL_LIBRARY_PATH'}) ?
	$ENV{'SITETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use warnings;
use strict;
use diagnostics;

use File::Path;

use Sitetool::Autoconfig;
use Sitetool::Base::Trace;
use Sitetool::Base::Debug;
use Sitetool::Base::Program;
use Sitetool::OS::Shell;
use Sitetool::OS::Directory;
use Sitetool::OS::Filename;
use Sitetool::OS::File;
use Sitetool::WWW::HREF;
use Sitetool::WWW::HTTP;
use Sitetool::WWW::HTTPS;
use Sitetool::WWW::FTP;
use Sitetool::WWW::MAILTO;
use Sitetool::Configuration;
use Sitetool::Array;

#
# Globals
#

our $PROGRAM_NAME = "sitetool-check";

#
# Utilities
#

sub help_brief ()
{
    print "  -o, --output-dir=DIR        Use DIR as output directory\n";
    print "  -f, --force                 consider all files obsolete\n";
}

sub help_common ()
{
    print "  -W, --warnings=CATEGORY     report the warnings falling in CATEGORY\n";
    print "  -d, --debug                 enable debugging mode\n";
    print "  -v, --verbose               enable verbose mode\n";
    print "  -h, --help                  print this help, then exit\n";
    print "  -B, --brief-help            print a brief help, then exit\n";
    print "  -V, --version               print version number, then exit\n";
}

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";
    print "  -c, --configuration=FILE    configuration file is FILE\n";

    help_brief();
    help_common();

    print "\n";
    print "Warning categories include:\n";
    print "  \`all'           all the warnings\n";
    print "  \`none'          turn off all the warnings\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

# XXX FIXME: To be removed ASAP
my $output_dir         = "";
my $configuration_file = "";
my $force_mode         = 0;

debug_set(0);
verbose_set(0);
warning_set("none");

# Parse options
my $i = 0;
while ($i <= $#ARGV) {
    if (($ARGV[$i] =~ /^\-c$/)      || ($ARGV[$i] =~ /^\-\-configuration$/)) {
	$i++;
	$configuration_file = $ARGV[$i];
    } elsif (($ARGV[$i] =~ /^\-o$/) || ($ARGV[$i] =~ /^\-\-output-dir$/)) {
	$i++;
	$output_dir = $ARGV[$i];
    } elsif (($ARGV[$i] =~ /^\-f$/) || ($ARGV[$i] =~ /^\-\-force$/)) {
	$force_mode = 1;
    } elsif (($ARGV[$i] =~ /^\-B$/) || ($ARGV[$i] =~ /^\-\-brief\-help$/)) {
	help_brief();
	exit 0;
    } elsif (($ARGV[$i] =~ /^\-h$/) || ($ARGV[$i] =~ /^\-\-help$/)) {
	help();
	exit 0;
    } elsif (($ARGV[$i] =~ /^\-W$/) || ($ARGV[$i] =~ /^\-\-warnings$/)) {
	$i++;
	if (!defined($ARGV[$i])) {
	  hint("Missing warning level");
	  exit 1;
	}
	warning_set($ARGV[$i]);
    } elsif (($ARGV[$i] =~ /^\-d$/) || ($ARGV[$i] =~ /^\-\-debug$/)) {
	debug_set(1);
    } elsif (($ARGV[$i] =~ /^\-v$/) || ($ARGV[$i] =~ /^\-\-verbose$/)) {
	verbose_set(1);
    } elsif (($ARGV[$i] =~ /^\-V$/) || ($ARGV[$i] =~ /^\-\-version$/)) {
	version();
	exit 0;
    } else {
	error("Unknown option \`" . $ARGV[$i] . "'");
	exit 1;
    }

    $i++;
}

#
# Parameters check
#

if ($configuration_file eq "") {
    hint("Missing configuration file");
    exit 1;
}
if ($output_dir eq "") {
    hint("Missing output directory");
    exit 1;
}

#
# Start the real work
#

my %configuration;
if (!configuration_melt($configuration_file, \%configuration)) {
    error("Cannot melt configuration from file \`$configuration_file'");
    hint("Try forcing a complete configuration file re-parsing");
    exit 1;
}

#
# Get output directory
#
$output_dir = filename_rel2abs($output_dir);

#
# Validate each page
#
verbose("Extracting links");
my %links;
for my $page_id (keys(%{$configuration{PAGES}})) {
    verbose("Extracting page \`" . $page_id . "' links");

    my $destination;
    $destination = $configuration{PAGES}{$page_id}{DESTINATION};
    if (!defined($destination)) {
	error("Page \`" . $page_id. "' has no destination");
	exit 1;
    }

    my $file;
    $file = File::Spec->catfile($output_dir, $destination);
    assert(file_ispresent($file));

    my $string;
    $string = undef;
    if (!file_tostring($file, \$string)) {
	error("Problems reading file \`" . $file . "'");
	exit 1;
    }
    assert(defined($string));
    
    my @page_links;
    @page_links = array_uniq(href_extract($string));
    
    verbose("Page \`" . $page_id . "' links are \`@page_links'");
	
    for my $link (@page_links) {
	if (!defined($links{$link})) {
	    $links{$link} = [ $page_id ];
	} else {
	    push(@{$links{$link}}, $page_id);
	}
    }
}

#verbose("Links are");
#for my $link (keys(%links)) {
#    my @pages;
#
#    @pages = @{$links{$link}};
#    debug("Link \`" . $link . "' is present in pages \`@pages'");
#}

verbose("Checking links");
for my $link (keys(%links)) {

    my $filename;
    
    $filename = filename_mktemp();
    assert(defined($filename));
    
    my $downloaded;
    
    $downloaded = 0;
    if (href_ishttp($link)) {
	verbose("Checking http link \`" . $link . "'");
	if (http_download($link, $filename)) {
	    $downloaded = 1;
	}
    } elsif (href_ishttps($link)) {
	verbose("Checking https link \`" . $link . "'");
	if (https_download($link, $filename)) {
	    $downloaded = 1;
	}
    } elsif (href_isftp($link)) {
	verbose("Checking ftp link \`" . $link . "'");
	if (ftp_download($link, $filename)) {
	    $downloaded = 1;
	}
    } elsif (href_ismailto($link)) {
	debug("Skipping mailto link \`" . $link . "'");
	$downloaded = 1;
    } else {
	debug("Skipping local link \`" . $link . "'");
	$downloaded = 1;
    }
    
    file_remove($filename);
    
    if (!$downloaded) {
	my @involved_pages;

	@involved_pages = @{$links{$link}};

	my $err;
	
	$err =
	    "Cannot download link \`" . $link . "' " .
	    "(involved pages \`@involved_pages')";

	if ($force_mode) {
	    warning($err);
	} else {
	    error($err);
	    exit 1;
	}
    }
}

exit 0;
